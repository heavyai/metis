// @flow
declare type Connector = {
  query: () => Promise<Array<any>>,
  tables: Array<string>
};

declare type DataState = {|
  type: "data",
  source: string | Array<SourceTransform | DataState>,
  name: string,
  transform: Array<Transform>
|};

declare type GraphContext = {
  connector: Connector,
  state: GraphState,
  parser: Parser,
};

declare type GraphState = {
  [string]: DataState
};

declare type Graph = {
  registerParser: Function,
  getState: () => GraphState,
  nodes: () => Array<DataNode>,
  data: (state: DataState) => DataNode
};

declare type DataNode = {
  getState: () => DataState,
  transform: (transform: Transform | Array<Transform> | Function) => DataNode,
  toSQL: () => string,
  values: () => Promise<Array<any>>
};


declare type TypeDefinition = {
  meta: string,
  type: string
}

declare type Parser = {
  parseExpression: (expr: Expression) => string,
  parseTransform: (sql: SQL, transform: Transform) => SQL,
  parseDataState: (data: DataState, sql?: SQL) => SQL,
  parseSource: (sourceTransforms: Array<SourceTransform | DataState>) => string,
  writeSQL: (state: DataState) => string,
  write: (sql: SQL) => string,
  registerParser: (definition: TypeDefinition, typeParser: Function) => void
}
