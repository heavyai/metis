//
// Autogenerated by Thrift Compiler (0.10.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


TExtArgumentType = {
  'Int8' : 0,
  'Int16' : 1,
  'Int32' : 2,
  'Int64' : 3,
  'Float' : 4,
  'Double' : 5,
  'Void' : 6,
  'PInt8' : 7,
  'PInt16' : 8,
  'PInt32' : 9,
  'PInt64' : 10,
  'PFloat' : 11,
  'PDouble' : 12,
  'PBool' : 13,
  'Bool' : 14,
  'ArrayInt8' : 15,
  'ArrayInt16' : 16,
  'ArrayInt32' : 17,
  'ArrayInt64' : 18,
  'ArrayFloat' : 19,
  'ArrayDouble' : 20,
  'ArrayBool' : 21,
  'GeoPoint' : 22,
  'GeoLineString' : 23,
  'Cursor' : 24,
  'GeoPolygon' : 25,
  'GeoMultiPolygon' : 26,
  'ColumnInt8' : 27,
  'ColumnInt16' : 28,
  'ColumnInt32' : 29,
  'ColumnInt64' : 30,
  'ColumnFloat' : 31,
  'ColumnDouble' : 32,
  'ColumnBool' : 33,
  'TextEncodingNone' : 34,
  'TextEncodingDict' : 35,
  'ColumnListInt8' : 36,
  'ColumnListInt16' : 37,
  'ColumnListInt32' : 38,
  'ColumnListInt64' : 39,
  'ColumnListFloat' : 40,
  'ColumnListDouble' : 41,
  'ColumnListBool' : 42,
  'ColumnTextEncodingDict' : 43,
  'ColumnListTextEncodingDict' : 44,
  'ColumnTimestamp' : 45,
  'Timestamp' : 46,
  'ColumnArrayInt8' : 47,
  'ColumnArrayInt16' : 48,
  'ColumnArrayInt32' : 49,
  'ColumnArrayInt64' : 50,
  'ColumnArrayFloat' : 51,
  'ColumnArrayDouble' : 52,
  'ColumnArrayBool' : 53,
  'ColumnListArrayInt8' : 54,
  'ColumnListArrayInt16' : 55,
  'ColumnListArrayInt32' : 56,
  'ColumnListArrayInt64' : 57,
  'ColumnListArrayFloat' : 58,
  'ColumnListArrayDouble' : 59,
  'ColumnListArrayBool' : 60,
  'GeoMultiLineString' : 61,
  'ArrayTextEncodingNone' : 62,
  'ColumnTextEncodingNone' : 63,
  'ColumnListTextEncodingNone' : 64,
  'ColumnArrayTextEncodingNone' : 65,
  'ColumnListArrayTextEncodingNone' : 66,
  'ArrayTextEncodingDict' : 67,
  'ColumnArrayTextEncodingDict' : 68,
  'ColumnListArrayTextEncodingDict' : 69,
  'GeoMultiPoint' : 70,
  'DayTimeInterval' : 71,
  'YearMonthTimeInterval' : 72
};
TOutputBufferSizeType = {
  'kConstant' : 0,
  'kUserSpecifiedConstantParameter' : 1,
  'kUserSpecifiedRowMultiplier' : 2,
  'kTableFunctionSpecifiedParameter' : 3,
  'kPreFlightParameter' : 4
};
TUserDefinedFunction = function(args) {
  this.name = null;
  this.argTypes = null;
  this.retType = null;
  this.annotations = null;
  if (args) {
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.argTypes !== undefined && args.argTypes !== null) {
      this.argTypes = Thrift.copyList(args.argTypes, [null]);
    }
    if (args.retType !== undefined && args.retType !== null) {
      this.retType = args.retType;
    }
    if (args.annotations !== undefined && args.annotations !== null) {
      this.annotations = Thrift.copyList(args.annotations, [Thrift.copyMap, null]);
    }
  }
};
TUserDefinedFunction.prototype = {};
TUserDefinedFunction.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.argTypes = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = input.readI32().value;
          this.argTypes.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.retType = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size7 = 0;
        var _rtmp311;
        this.annotations = [];
        var _etype10 = 0;
        _rtmp311 = input.readListBegin();
        _etype10 = _rtmp311.etype;
        _size7 = _rtmp311.size;
        for (var _i12 = 0; _i12 < _size7; ++_i12)
        {
          var elem13 = null;
          var _size14 = 0;
          var _rtmp318;
          elem13 = {};
          var _ktype15 = 0;
          var _vtype16 = 0;
          _rtmp318 = input.readMapBegin();
          _ktype15 = _rtmp318.ktype;
          _vtype16 = _rtmp318.vtype;
          _size14 = _rtmp318.size;
          for (var _i19 = 0; _i19 < _size14; ++_i19)
          {
            if (_i19 > 0 ) {
              if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
                input.rstack.pop();
              }
            }
            var key20 = null;
            var val21 = null;
            key20 = input.readString().value;
            val21 = input.readString().value;
            elem13[key20] = val21;
          }
          input.readMapEnd();
          this.annotations.push(elem13);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TUserDefinedFunction.prototype.write = function(output) {
  output.writeStructBegin('TUserDefinedFunction');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.argTypes !== null && this.argTypes !== undefined) {
    output.writeFieldBegin('argTypes', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.I32, this.argTypes.length);
    for (var iter22 in this.argTypes)
    {
      if (this.argTypes.hasOwnProperty(iter22))
      {
        iter22 = this.argTypes[iter22];
        output.writeI32(iter22);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.retType !== null && this.retType !== undefined) {
    output.writeFieldBegin('retType', Thrift.Type.I32, 3);
    output.writeI32(this.retType);
    output.writeFieldEnd();
  }
  if (this.annotations !== null && this.annotations !== undefined) {
    output.writeFieldBegin('annotations', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.MAP, this.annotations.length);
    for (var iter23 in this.annotations)
    {
      if (this.annotations.hasOwnProperty(iter23))
      {
        iter23 = this.annotations[iter23];
        output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(iter23));
        for (var kiter24 in iter23)
        {
          if (iter23.hasOwnProperty(kiter24))
          {
            var viter25 = iter23[kiter24];
            output.writeString(kiter24);
            output.writeString(viter25);
          }
        }
        output.writeMapEnd();
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TUserDefinedTableFunction = function(args) {
  this.name = null;
  this.sizerType = null;
  this.sizerArgPos = null;
  this.inputArgTypes = null;
  this.outputArgTypes = null;
  this.sqlArgTypes = null;
  this.annotations = null;
  if (args) {
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.sizerType !== undefined && args.sizerType !== null) {
      this.sizerType = args.sizerType;
    }
    if (args.sizerArgPos !== undefined && args.sizerArgPos !== null) {
      this.sizerArgPos = args.sizerArgPos;
    }
    if (args.inputArgTypes !== undefined && args.inputArgTypes !== null) {
      this.inputArgTypes = Thrift.copyList(args.inputArgTypes, [null]);
    }
    if (args.outputArgTypes !== undefined && args.outputArgTypes !== null) {
      this.outputArgTypes = Thrift.copyList(args.outputArgTypes, [null]);
    }
    if (args.sqlArgTypes !== undefined && args.sqlArgTypes !== null) {
      this.sqlArgTypes = Thrift.copyList(args.sqlArgTypes, [null]);
    }
    if (args.annotations !== undefined && args.annotations !== null) {
      this.annotations = Thrift.copyList(args.annotations, [Thrift.copyMap, null]);
    }
  }
};
TUserDefinedTableFunction.prototype = {};
TUserDefinedTableFunction.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.sizerType = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.sizerArgPos = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size26 = 0;
        var _rtmp330;
        this.inputArgTypes = [];
        var _etype29 = 0;
        _rtmp330 = input.readListBegin();
        _etype29 = _rtmp330.etype;
        _size26 = _rtmp330.size;
        for (var _i31 = 0; _i31 < _size26; ++_i31)
        {
          var elem32 = null;
          elem32 = input.readI32().value;
          this.inputArgTypes.push(elem32);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.LIST) {
        var _size33 = 0;
        var _rtmp337;
        this.outputArgTypes = [];
        var _etype36 = 0;
        _rtmp337 = input.readListBegin();
        _etype36 = _rtmp337.etype;
        _size33 = _rtmp337.size;
        for (var _i38 = 0; _i38 < _size33; ++_i38)
        {
          var elem39 = null;
          elem39 = input.readI32().value;
          this.outputArgTypes.push(elem39);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.LIST) {
        var _size40 = 0;
        var _rtmp344;
        this.sqlArgTypes = [];
        var _etype43 = 0;
        _rtmp344 = input.readListBegin();
        _etype43 = _rtmp344.etype;
        _size40 = _rtmp344.size;
        for (var _i45 = 0; _i45 < _size40; ++_i45)
        {
          var elem46 = null;
          elem46 = input.readI32().value;
          this.sqlArgTypes.push(elem46);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.LIST) {
        var _size47 = 0;
        var _rtmp351;
        this.annotations = [];
        var _etype50 = 0;
        _rtmp351 = input.readListBegin();
        _etype50 = _rtmp351.etype;
        _size47 = _rtmp351.size;
        for (var _i52 = 0; _i52 < _size47; ++_i52)
        {
          var elem53 = null;
          var _size54 = 0;
          var _rtmp358;
          elem53 = {};
          var _ktype55 = 0;
          var _vtype56 = 0;
          _rtmp358 = input.readMapBegin();
          _ktype55 = _rtmp358.ktype;
          _vtype56 = _rtmp358.vtype;
          _size54 = _rtmp358.size;
          for (var _i59 = 0; _i59 < _size54; ++_i59)
          {
            if (_i59 > 0 ) {
              if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
                input.rstack.pop();
              }
            }
            var key60 = null;
            var val61 = null;
            key60 = input.readString().value;
            val61 = input.readString().value;
            elem53[key60] = val61;
          }
          input.readMapEnd();
          this.annotations.push(elem53);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TUserDefinedTableFunction.prototype.write = function(output) {
  output.writeStructBegin('TUserDefinedTableFunction');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.sizerType !== null && this.sizerType !== undefined) {
    output.writeFieldBegin('sizerType', Thrift.Type.I32, 2);
    output.writeI32(this.sizerType);
    output.writeFieldEnd();
  }
  if (this.sizerArgPos !== null && this.sizerArgPos !== undefined) {
    output.writeFieldBegin('sizerArgPos', Thrift.Type.I32, 3);
    output.writeI32(this.sizerArgPos);
    output.writeFieldEnd();
  }
  if (this.inputArgTypes !== null && this.inputArgTypes !== undefined) {
    output.writeFieldBegin('inputArgTypes', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.I32, this.inputArgTypes.length);
    for (var iter62 in this.inputArgTypes)
    {
      if (this.inputArgTypes.hasOwnProperty(iter62))
      {
        iter62 = this.inputArgTypes[iter62];
        output.writeI32(iter62);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.outputArgTypes !== null && this.outputArgTypes !== undefined) {
    output.writeFieldBegin('outputArgTypes', Thrift.Type.LIST, 5);
    output.writeListBegin(Thrift.Type.I32, this.outputArgTypes.length);
    for (var iter63 in this.outputArgTypes)
    {
      if (this.outputArgTypes.hasOwnProperty(iter63))
      {
        iter63 = this.outputArgTypes[iter63];
        output.writeI32(iter63);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.sqlArgTypes !== null && this.sqlArgTypes !== undefined) {
    output.writeFieldBegin('sqlArgTypes', Thrift.Type.LIST, 6);
    output.writeListBegin(Thrift.Type.I32, this.sqlArgTypes.length);
    for (var iter64 in this.sqlArgTypes)
    {
      if (this.sqlArgTypes.hasOwnProperty(iter64))
      {
        iter64 = this.sqlArgTypes[iter64];
        output.writeI32(iter64);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.annotations !== null && this.annotations !== undefined) {
    output.writeFieldBegin('annotations', Thrift.Type.LIST, 7);
    output.writeListBegin(Thrift.Type.MAP, this.annotations.length);
    for (var iter65 in this.annotations)
    {
      if (this.annotations.hasOwnProperty(iter65))
      {
        iter65 = this.annotations[iter65];
        output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(iter65));
        for (var kiter66 in iter65)
        {
          if (iter65.hasOwnProperty(kiter66))
          {
            var viter67 = iter65[kiter66];
            output.writeString(kiter66);
            output.writeString(viter67);
          }
        }
        output.writeMapEnd();
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

